import React, { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { PlusCircle, FileText, X, ArrowUpDown } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { getUserAccount } from "../../../service/authService";
import { addDocument } from "../../../service/docSrvice";
import FormSelect from "../../inputs/FormSelect";
import axios from "axios";

const AddDocs = ({ onDocumentAdded, documents }) => {
  const [user, setUser] = useState(null);
  const navigate = useNavigate();
  
  const [documentTypes, setDocumentTypes] = useState([]);
  const [isLoadingTypes, setIsLoadingTypes] = useState(true);
  
  const [sortBy, setSortBy] = useState("date"); // Default sorting field
  const [sortOrder, setSortOrder] = useState("asc"); // "asc" or "desc"

  useEffect(() => {
    const fetchUser = async () => {
      const userData = await getUserAccount();
      if (userData) {
        setUser(userData);
      } else {
        navigate("/");
      }
    };

    const fetchDocumentTypes = async () => {
      const accessToken = localStorage.getItem("accessToken");

      try {
        const response = await axios.get(
          "http://192.168.1.94:5204/api/Documents/Types",
          { headers: { Authorization: `Bearer ${accessToken}` } }
        );

        const transformedTypes = response.data.map((type) => ({
          value: type.id,
          label: type.typeName,
          typeAttr: type.typeAttr,
        }));

        setDocumentTypes(transformedTypes);
        setIsLoadingTypes(false);
      } catch (error) {
        console.error("Error fetching document types:", error);
        setIsLoadingTypes(false);
      }
    };

    fetchUser();
    fetchDocumentTypes();
  }, [navigate]);

  const [showForm, setShowForm] = useState(false);
  const [newDoc, setNewDoc] = useState({
    title: "",
    content: "",
    date: "",
    type: "",
    typeName: "",
    status: "Pending", // Default status
  });
  
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState("");
  const [step, setStep] = useState(1);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setNewDoc((prev) => ({ ...prev, [name]: value }));
    if (error) setError("");
  };

  const handleTypeChange = (selectedType) => {
    const selectedTypeObj = documentTypes.find(
      (type) => type.value === selectedType
    );

    setNewDoc((prev) => ({
      ...prev,
      type: selectedType,
      typeName: selectedTypeObj ? selectedTypeObj.label : "",
    }));

    if (error) setError("");
  };

  const handleNext = () => {
    if (step === 1 && !newDoc.title.trim()) {
      setError("Title is required.");
      return;
    }
    if (step === 2 && !newDoc.content.trim()) {
      setError("Content cannot be empty.");
      return;
    }
    if (step === 3 && !newDoc.date) {
      setError("Please select a date.");
      return;
    }
    if (step === 4 && !newDoc.type) {
      setError("Please select a document type.");
      return;
    }
    setError("");
    setStep((prev) => prev + 1);
  };

  const handleBack = () => {
    setStep((prev) => prev - 1);
  };

  const handleSubmit = async () => {
    setIsSubmitting(true);

    if (!newDoc.type) {
      setError("Please select a document type.");
      setIsSubmitting(false);
      return;
    }

    try {
      const addedDoc = await addDocument(
        newDoc.title,
        newDoc.content,
        newDoc.date,
        newDoc.type
      );

      if (addedDoc) {
        onDocumentAdded(addedDoc);
        setShowForm(false);
        setNewDoc({ title: "", content: "", date: "", type: "", typeName: "", status: "Pending" });
        setStep(1);
      }
    } catch (err) {
      setError(err.response?.data?.message || "An error occurred while saving your document.");
    } finally {
      setIsSubmitting(false);
    }
  };

  const sortDocuments = (documents) => {
    return [...documents].sort((a, b) => {
      let valueA = a[sortBy];
      let valueB = b[sortBy];

      if (sortBy === "date") {
        valueA = new Date(a.date);
        valueB = new Date(b.date);
      }

      if (sortOrder === "asc") return valueA > valueB ? 1 : -1;
      return valueA < valueB ? 1 : -1;
    });
  };

  return (
    <div>
      {user && (user.role === "Admin" || user.role === "FullUser") && (
        <motion.div
          onClick={() => setShowForm(true)}
          whileHover={{ scale: 1.01 }}
          whileTap={{ scale: 0.95 }}
          className="bg-gradient-to-br from-blue-500/20 to-purple-500/20 grid place-items-center p-2 w-2/3 rounded-lg cursor-pointer transition border border-slate-700 h-full"
        >
          <div className="flex flex-row items-center">
            <PlusCircle size={24} className="text-blue-400" />
            <p className="text-gray-200 font-medium text-center pl-2">
              Add New Document
            </p>
          </div>
        </motion.div>
      )}

      <div className="flex justify-between items-center mt-4">
        <label className="text-white">Sort by:</label>
        <select
          value={sortBy}
          onChange={(e) => setSortBy(e.target.value)}
          className="p-2 bg-gray-700 text-white rounded"
        >
          <option value="date">Date</option>
          <option value="title">Title</option>
          <option value="type">Type</option>
          <option value="status">Status</option>
        </select>

        <button
          onClick={() => setSortOrder(sortOrder === "asc" ? "desc" : "asc")}
          className="ml-2 p-2 bg-gray-700 text-white rounded flex items-center"
        >
          <ArrowUpDown size={16} className="mr-1" />
          {sortOrder === "asc" ? "Ascending" : "Descending"}
        </button>
      </div>

      <ul className="mt-4">
        {sortDocuments(documents).map((doc) => (
          <li key={doc.id} className="text-white p-2 border-b border-gray-600">
            <strong>{doc.title}</strong> - {doc.typeName} - {doc.status} - {doc.date}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default AddDocs;
